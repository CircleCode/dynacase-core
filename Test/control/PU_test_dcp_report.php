<?php

namespace PU;
/**
 * Test class for _REPORT.
 * Generated by PHPUnit on 2011-09-05 at 14:26:32.
 */

require_once 'PU_testcase_dcp_action.php';

class TestReport extends TestCaseDcpAction
{
    public static function setUpBeforeClass()
    {
        parent::setUpBeforeClass();
        self::connectUser();
        self::beginTransaction();
        self::importDocument("FamilyAll_element.csv");
        self::importDocument("documents_rapport.csv");
        /*import twice : there links between documents*/
        self::importDocument("documents_rapport.csv");
    }

    public function setUp()
    {
        parent::setUp();
        $this->setUpTestAction("FDL", "REPORT_EXPORT_CSV");
    }

    public function tearDown()
    {
        $this->resetCurrentParameters();
    }

    /**
     * Test report with default option
     */
    public function testDefaultReport()
    {
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("default_report.csv"), $csvContent);
    }

    /**
     * Test report with kind pivot, and pivot == all_element_text
     */
    public function testPivotCustomPivotReport()
    {
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('kind', 'pivot');
        $this->setCurrentParameters('pivot', 'all_element_text');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("pivot_allelement_report.csv"), $csvContent);
    }

    /**
     * Test report with custom CSV export
     */
    public function testCustomCSVOption()
    {
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('delimiter', '"');
        $this->setCurrentParameters('enclosure', ',');
        $this->setCurrentParameters('encoding', 'UTF-8');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("customCSV_report.csv"), $csvContent);
    }

    /**
     * Test report with custom date format
     */
    public function testCustomDateFormat()
    {
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('dateFormat', 'ISO');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__."_ISO", $csvContent);
        $this->assertEquals($this->readExampleFile("dateISO_report.csv"), $csvContent);
        $this->setCurrentParameters('dateFormat', 'FR');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__."_FR", $csvContent);
        $this->assertEquals($this->readExampleFile("dateFR_report.csv"), $csvContent);
    }

    /**
     * Test report with custom date format
     */
    public function testDecimalSeparator()
    {
        $this->setCurrentParameters('id', 'RAPPORT_4e6e2c77b36ed');
        $this->setCurrentParameters('decimalSeparator', '%');
        $csvContent = $this->testAction->execute();
        $this->saveReport(__METHOD__, $csvContent);
        $this->assertEquals($this->readExampleFile("decimalSeparator_report.csv"), $csvContent);
    }

    private function readExampleFile($fileName)
    {
        $csvFile = 'DCPTEST/' . $fileName;
        $content = file_get_contents($csvFile);
        return $content;
    }
    
    private function saveReport($testName, $content) {
        $testName = str_replace(":", "_", $testName);
        $csvFile = tempnam($this->testAction->GetParam("CORE_TMPDIR", "/tmp") , sprintf('csv_%s', $testName)).'.csv';
        $fp = fopen($csvFile, 'w');
        fwrite($fp, $content);
        fclose($fp);
        echo "Content report save in $csvFile \n";
    }
}
?>
