<style type="text/css">

#help-lang-name {
	vertical-align: middle;
}
#help-langs a {
	outline: 0;
}
#help-langs {
	float: right;
}
#help-langs img {
	border: 1px solid [CORE_BGCOLOR];
	padding: 0 3px;
}
#help-langs a.current img {
	background: [COLOR_B9];
	border-color: [COLOR_B5];
}
#help-langs a.active img {
	background: [CORE_BGCOLOR];
	border-color: [COLOR_A7];
}
#help-langs .help-section-langs a.active:hover img {
	background: [COLOR_A9];
	border-color: [COLOR_A5];
}
#help-langs a.inactive {
	opacity: 0.25;
	-moz-opacity: 0.25;
	-webkit-opacity: 0.25;
}
.help-section-item {
	padding-bottom: 8px;
}
.help-section {
	overflow: hidden;
	clear: both;
}
#help-sections .help-section-langs img {
	border: 1px solid [CORE_BGCOLOR];
	padding: 0 3px;
}
#help-sections .help-section-langs a.current img {
	background: [COLOR_B9];
	border-color: [COLOR_B5];
}
#help-sections .help-section-langs a.active img {
	background: [CORE_BGCOLOR];
	border-color: [COLOR_A7];
}
#help-sections .help-section-langs a.active:hover img {
	background: [COLOR_A9];
	border-color: [COLOR_A5];
}
#help-sections .help-section-langs a.inactive {
	opacity: 0.25;
	-moz-opacity: 0.25;
	-webkit-opacity: 0.25;
}
#help-sections .help-section-langs a:hover {
	background:none;
}
.help-section-title {
	color: [COLOR_B0];
	font-weight: bold;
	font-size: 16px;
}
#help-sections .help-section-title {
	background: url([IMG:minus.png]) no-repeat left center;
	padding-left: 20px;
	cursor: pointer;
}
#help-sections .section-closed {
	background-image: url([IMG:plus.png]);
}
#help-sections .help-section-langs {
	float: right;
}
.help-section-text {
	margin-left: 24px;
}
.help-first .help_up {
	display: none;
}
.help-last .help_down {
	display: none;
}
</style>

<div style="display:none">[ZONE FDL:EDITARRAY?arrayid=HELP_T_HELP]</div>
<div style="display:none">[ZONE FDL:EDITARRAY?arrayid=HELP_T_SECTIONS]</div>

<fieldset><legend>[TEXT:Online help]</legend>
	<div id="help-langs">
	[BLOCK HELPLANGS]
		<a href="#[LANGKEY]" id="help-langs-[LANGKEY]" class="[LANGCLASS]" title="[LANGNAME]" onclick="return help_change_lang(this,'[LANGKEY]')"><img src="[IMG:flags/[LANGISO].png|16]" title="[LANGNAME]" width="16" height="16" /></a>
	[ENDBLOCK HELPLANGS]
	</div>
	<div id="help-langs">
		<a onclick="return help_open_subwindow(event,'help_t_help');">[TEXT:Edit translations]</a>&nbsp;
		&nbsp;&nbsp;
	</div>

	<div class="help-section-item">
		<div class="help-section-title">[TEXT:Help name]</div>
		<div class="help-section-text" id="help-name">[HELPNAME]</div>
	</div>

	<div class="help-section-item">
		<div class="help-section-title">[TEXT:Help description]</div>
		<div class="help-section-text" id="help-description">[HELPDESCRIPTION]</div>
	</div>
	
</fieldset>

<div id="help-section-add-div" style="display:none">
	<table style="width:100%" cellspacing="0" class="edittable">
		<tr>
			<td class="FREEDOMLabel" style="width:140px"><span>[TEXT:Section key]&nbsp:&nbsp;</span></td>
			<td><input type="text" name="section_name" value="" /></td>
		</tr>
		[IF HELPATTRIBUTESLIST]
		<tr>
			<td class="FREEDOMLabel" style="width:140px"></td>
			<td><select onchange="help_popup_select(this.value)">
				<option value="">[TEXT:Choose a value]</option>
				[BLOCK HELPATTRIBUTES]<option value="[HELPATTRVALUE]">[HELPATTRNAME]</option>[ENDBLOCK HELPATTRIBUTES]
			</select></td>
		</tr>[ENDIF HELPATTRIBUTESLIST]
		<tr>
			<td class="FREEDOMLabel" style="width:140px"></td>
			<td><a onclick="help_popup_add()">[TEXT:Add]</a> | <a onclick="help_popup_close()">[TEXT:Cancel]</a></td>
		</tr>
	</table>
</div>

<fieldset id="help-sections"><legend>[TEXT:Sections] (<a onclick="help_popup(event)">[TEXT:Add section]</a>)</legend>

<input type="hidden" name="section_name" value="" id="section_name" />
<input type="hidden" name="edit_section_key" value="" id="edit_section_key" />

[BLOCK CONTENTSECTIONS]<div class="help-section" id="sec-[SECKEY]"><div class="help-section-langs" id="sec-langs-[SECKEY]">
	[BLOCK [SECTIONLANGS]]
	<a href="#[LANGKEY]" class="[LANGCLASS]" title="[LANGNAME]" onclick="return help_change_lang_section(this,'[SECKEY]','[LANGKEY]')"><img src="[IMG:flags/[LANGISO].png|16]" title="[LANGNAME]" width="16" height="16" /></a>
	[ENDBLOCK [SECTIONLANGS]]
</div><div class="help-section-langs">
	<a onclick="return help_up('[SECKEY]')" class="help_up">[TEXT:Up] &uarr;</a>&nbsp;
	<a onclick="return help_down('[SECKEY]')" class="help_down">[TEXT:Down] &darr;</a>&nbsp;
	<a onclick="return help_open_subwindow(event,'help_t_sections','[SECKEY]');">[TEXT:Edit translations]</a>&nbsp;
	&nbsp;&nbsp;
</div>[BLOCK [SECTIONITEMS]]<div class="help-section-item" style="display:[SECDISPLAY]" id="sec-[SECKEY]-[SECLANG]">
	<div class="help-section-title" id="sec-name-[SECKEY]-[SECLANG]" onclick="toggle_section('[SECKEY]')" title="[TEXT:Section key] : [SECKEY]">[SECNAME]</div>
	<div class="help-section-text" id="sec-text-[SECKEY]-[SECLANG]">[SECTEXT]</div>
</div>[ENDBLOCK [SECTIONITEMS]]</div>[ENDBLOCK CONTENTSECTIONS]


</fieldset>

<script type="text/javascript">
var LANGS = [JSONLANGS];

function help_popup_close() {
	var div_s = document.getElementById('HELPPOPUP_s');
	var div_b = document.getElementById('HELPPOPUP_b');
	var body = document.body;
	if(div_s && body) {
		body.removeChild(div_s);
	}
	if(div_b && body) {
		body.removeChild(div_b);
	}
}

function help_popup_add() {
	var div = document.getElementById('HELPPOPUP_c');
	if(div) {
		var inputs = div.getElementsByTagName('input');
		var seckey = '';
		for(var i in inputs) {
			if(inputs[i].name == 'section_name') {
				seckey = inputs[i].value
				break;
			}
		}
		if(!seckey) {
			displayWarningMsg("[TEXT:It cannot be empty]");
		}
		else if(!seckey.match(/^[a-z0-9_-]+$/i)) {
			displayWarningMsg("[TEXT:Only these characters are allowed : a..z, A..Z, 0..9, _, -]");
		}
		else if(help_section_exists(seckey)) {
			displayWarningMsg("[TEXT:Sorry but this section key already exists !]");
		}
		else {
			help_add_section(seckey);
			help_popup_close();
		}
	}
}

function help_popup_select(value) {
	if(value!='') {
		document.getElementById('section_name').value = value;
		var div = document.getElementById('HELPPOPUP_c');
		if(div) {
			var inputs = div.getElementsByTagName('input');
			for(var i in inputs) {
				if(inputs[i].name == 'section_name') {
					inputs[i].value = value;
					break;
				}
			}
		}
	}
}

function help_popup(event) {
	if (event) event.cancelBubble=true;

	GetXY(event);
	var x=Xpos;
	var y=Ypos;
	var w=350;
	var h=120;
	
	var html = document.getElementById('help-section-add-div').innerHTML;

	new popUp(x, y, w, h, 'HELPPOPUP', html, '[CORE_BGCOLOR]', '[CORE_TEXTFGCOLOR]', '16pt serif', '[TEXT:Add section]', '[COLOR_B5]', '[CORE_TEXTFGCOLOR]', '[COLOR_B7]', '[CORE_BGCOLORALTERN]', 'black', true, true, true, true, false, false,true);

}

function help_down(seckey) {
	var minmax = help_get_minmax_order();
	if(!minmax) {
		return false;
	}
	var secorder = help_seckey_to_order(seckey);
	if(secorder < 0) {
		return false;
	}
	if(secorder == minmax.max) {
		return false;
	}
	// change values in array HTML
	var trs = document.getElementById('tbodyhelp_t_sections').getElementsByTagName('tr');
	for(var i=0; i < trs.length; i++) {
		var tr = trs[i];
		if(tr.id && tr.id.match(/^lasttr/i)) {
			break;
		}
		var inputs = tr.getElementsByTagName('input');
		for(var k=0; k < inputs.length; k++) {
			var input = inputs[k];
			if(input.name && input.name.match(/^_help_sec_order/i)) {
				var order = parseInt(input.value);
				if(order == secorder) {
					input.value = order + 1;
				}
				else if (order == secorder + 1) {
					input.value = order - 1;
				}
			}
		}
	}
	// move DOM
	var div_parent = document.getElementById('help-sections');
	var div = document.getElementById('sec-'+seckey);
	var div2 = document.getElementById('sec-'+help_order_to_seckey(secorder+2));
	if(div2) {
		var tmp = div_parent.removeChild(div);
		div_parent.insertBefore(tmp, div2);
	}
	else {
		var tmp = div_parent.removeChild(div);
		div_parent.appendChild(tmp);
	}
	help_check_first_last();
	return false;
}

function help_up(seckey) {
	var minmax = help_get_minmax_order();
	if(!minmax) {
		return false;
	}
	var secorder = help_seckey_to_order(seckey);
	if(secorder < 0) {
		return false;
	}
	if(secorder == minmax.min) {
		return false;
	}
	// change values in array HTML
	var trs = document.getElementById('tbodyhelp_t_sections').getElementsByTagName('tr');
	for(var i=0; i < trs.length; i++) {
		var tr = trs[i];
		if(tr.id && tr.id.match(/^lasttr/i)) {
			break;
		}
		var inputs = tr.getElementsByTagName('input');
		for(var k=0; k < inputs.length; k++) {
			var input = inputs[k];
			if(input.name && input.name.match(/^_help_sec_order/i)) {
				var order = parseInt(input.value);
				if(order == secorder) {
					input.value = order - 1;
				}
				else if (order == secorder - 1) {
					input.value = order + 1;
				}
			}
		}
	}
	// move DOM
	var div_parent = document.getElementById('help-sections');
	var div = document.getElementById('sec-'+seckey);
	var div2 = document.getElementById('sec-'+help_order_to_seckey(secorder));
	if(div2) {
		var tmp = div_parent.removeChild(div);
		div_parent.insertBefore(tmp, div2);
	}
	else {
		var tmp = div_parent.removeChild(div);
		div_parent.appendChild(tmp);
	}
	help_check_first_last();
	return false;
}

function help_order_to_seckey(order) {
	var sec_orders = getFormValue('help_sec_order');
	var sec_keys = getFormValue('help_sec_key');

	// load sections
	for(var i=0; i< sec_keys.length; i++) {
		if(order == sec_orders[i]) {
			return sec_keys[i];
		}
	}
	return false;
}

function help_check_first_last() {

	var sec_orders = getFormValue('help_sec_order');
	var sec_keys = getFormValue('help_sec_key');
	var first,last;
	var last_order = -1;

	// load sections
	for(var i=0; i< sec_keys.length; i++) {
		document.getElementById('sec-'+sec_keys[i]).className = 'help-section';
		if(sec_orders[i] == 1) {
			first = sec_keys[i];
		}
		if(sec_orders[i] > last_order) {
			last_order = sec_orders[i];
			last = sec_keys[i];
		}
	}
	
	if(first) {
		document.getElementById('sec-'+first).className += ' help-first';
	}
	if(last) {
		document.getElementById('sec-'+last).className += ' help-last';
	}
}

function help_seckey_to_order(seckey) {
	var sec_orders = getFormValue('help_sec_order');
	var sec_keys = getFormValue('help_sec_key');

	// load sections
	for(var i=0; i< sec_keys.length; i++) {
		if(seckey == sec_keys[i]) {
			return parseInt(sec_orders[i]);
		}
	}
	return -1;
}

function help_increment_orders() {
	var trs = document.getElementById('tbodyhelp_t_sections').getElementsByTagName('tr');
	for(var i=0; i < trs.length; i++) {
		var tr = trs[i];
		if(tr.id && tr.id.match(/^lasttr/i)) {
			break;
		}
		var inputs = tr.getElementsByTagName('input');
		for(var k=0; k < inputs.length; k++) {
			var input = inputs[k];
			if(input.name && input.name.match(/^_help_sec_order/i)) {
				input.value = parseInt(input.value) + 1;
			}
		}
	}
}

function help_get_minmax_order() {
	var min = 999999;
	var max = -1;
	var sec_orders = getFormValue('help_sec_order');
	for(var i=0; i< sec_orders.length; i++) {
		if(sec_orders[i] > max) {
			max = parseInt(sec_orders[i]);
		}
		if(sec_orders[i] < min) {
			min = parseInt(sec_orders[i]);
		}
	}
	if(min == 999999) {
		return false;
	}
	if(max == -1) {
		return false;
	}
	return {
		'min': min,
		'max': max
	};
}

function help_reorder(secorder) {
	var trs = document.getElementById('tbodyhelp_t_sections').getElementsByTagName('tr');
	for(var i=0; i < trs.length; i++) {
		var tr = trs[i];
		if(tr.id && tr.id.match(/^lasttr/i)) {
			break;
		}
		var inputs = tr.getElementsByTagName('input');
		for(var k=0; k < inputs.length; k++) {
			var input = inputs[k];
			if(input.name && input.name.match(/^_help_sec_order/i) && input.value > secorder) {
				input.value = parseInt(input.value) - 1;
			}
		}
	}
}

function help_add_section(seckey) {
	var item = {
		help_sec_order: 1,
		help_sec_key: seckey,
		help_sec_lang: '',
		help_sec_name: "[TEXT:New section] : "+seckey,
		help_sec_text: ''
	};

	help_increment_orders();

	// get lang
	for(var lang in LANGS) {
		item.help_sec_lang = lang;
		break;
	}

	addTableRow(item);

	// add element in DOM
	var div = document.createElement('div');
	div.id = 'sec-'+seckey;
	div.className = 'help-section';
	div.innerHTML = section_template.replace(/\{SECKEY\}/gi, seckey);

	var father = document.getElementById('help-sections');
	// try to find first correct chil
	var found = false;
	for(var i = 0; i < father.childNodes.length; i++) {
		var cls = father.childNodes[i].className;
		if(cls && (cls.match(/help-section /) || cls == 'help-section')) {
			found = father.childNodes[i];
			break;
		}
	}
	if(found) {
		father.insertBefore(div, found);
	}
	else {
		father.appendChild(div);
	}
	help_check_first_last();
}

function help_add_section_prompt(err) {
	var msg = "[TEXT:Please enter the new section key]";
	if(err) {
		msg += "\n"+err;
	}
	var seckey = window.prompt(msg);
	if(seckey) {
		if(!seckey.match(/^[a-z0-9_-]+$/i)) {
			help_add_section_prompt("[TEXT:Only these characters are allowed : a..z, A..Z, 0..9, _, -]");
		}
		else if(help_section_exists(seckey)) {
			help_add_section_prompt("[TEXT:Sorry but this section key already exists !]");
		}
		else {
			help_add_section(seckey);
		}
	}
}

function toggle_section(id) {
	for(var lang in LANGS) {
		var oname = document.getElementById('sec-name-'+id+'-'+lang);
		var otext = document.getElementById('sec-text-'+id+'-'+lang);
		if(otext.style.display == 'none') {
			otext.style.display = 'block';
			oname.className = 'help-section-title';
		}
		else {
			otext.style.display = 'none';
			oname.className = 'help-section-title section-closed';
		}
	}
}

function help_save_section(config) {

	// delete rows for this section
	var t = document.getElementById('tbodyhelp_t_sections');
	var i = 0;
	while(t.hasChildNodes()==true){
		var child = t.childNodes.item(i);
		if(child.id && child.id.substr(0, 6) == 'lasttr') {
			break;
		}
		if(child.getElementsByTagName) {
			var found = false;
			var inputs = child.getElementsByTagName('input');
			for(var k=0; k < inputs.length; k++) {
				if(inputs[k].name.substr(0, 13) == '_help_sec_key' && inputs[k].value == config.seckey) {
					found = true;
				}
			}
			if(found) {
				t.removeChild(child);
			}
			else {
				i++;
			}
		}
		else {
			i++;
		}
	}
	// add rows
	var current_found = false;
	var firstlang = false;
	for(var lang in config.langs) {
		if(lang.match(/^[a-z]{2}_[a-z]{2}$/i)) {
			if(config.langs[lang].name != '' || config.langs[lang].text != '') {
				firstlang = lang;
				addTableRow({
					help_sec_order: config.secorder,
					help_sec_key: config.seckey,
					help_sec_lang: lang,
					help_sec_name: config.langs[lang].name,
					help_sec_text: config.langs[lang].text
				});
				if(config.curlang == lang) {
					config.langs[lang].classname = 'current';
				}
				else {
					config.langs[lang].classname = 'active';
					current_found = true;
				}
			}
			else {
				config.langs[lang].classname = 'inactive';
			}
			document.getElementById('sec-name-'+config.seckey+'-'+lang).innerHTML = config.langs[lang].name;
			document.getElementById('sec-text-'+config.seckey+'-'+lang).innerHTML = config.langs[lang].text.replace(/\n/, '<br />');
		}
	}
	if(!current_found) {
		if(firstlang) {
			config.langs[firstlang].classname = 'current';
		}
		else {
			var sec = document.getElementById('sec-'+config.seckey);
			sec.parentNode.removeChild(sec);
			try {
				help_reorder(config.secorder);
				help_check_first_last();
			} catch(e) {}
			return false;
		}
	}
	// update text
	var items = document.getElementById('sec-langs-'+config.seckey).getElementsByTagName('a');
	var item_current;
	var i = 0;
	for(var lang in LANGS) {
		items[i].className = config.langs[lang].classname;
		if(config.langs[lang].classname == 'current') {
			help_change_lang_section(items[i],config.seckey,lang);
		}
		i++;
	}
}

function help_section_exists(seckey) {
	var obj = document.getElementById('sec-'+seckey);
	if(obj) {
		return true;
	}
	else {
		return false;
	}
}


function help_get_section_order(seckey) {

	var sec_orders = getFormValue('help_sec_order');
	var sec_keys = getFormValue('help_sec_key');

	if(!sec_keys || sec_keys.length == 0) {
		return 0;
	}

	for(var i=0; i< sec_keys.length; i++) {
		if(sec_keys[i] == seckey) {
			return sec_orders[i];
		}
	}
	return 0;
}

function help_get_section(seckey) {

	var sec_names = getFormValue('help_sec_name');
	var sec_langs = getFormValue('help_sec_lang');
	var sec_keys = getFormValue('help_sec_key');
	var sec_texts = getFormValue('help_sec_text');

	// init
	var res = [];
	for(var lang in LANGS) {
		res[lang] = { 'name': '', 'text': '' };
	}

	if(!sec_keys || sec_keys.length == 0) {
		return res;
	}

	// load
	for(var i=0; i< sec_keys.length; i++) {
		if(sec_keys[i] == seckey) {
			res[sec_langs[i]].name = sec_names[i];
			res[sec_langs[i]].text = sec_texts[i];
		}
	}
	return res;
}

function help_get_section_links(seckey) {
	var res = [];
	var div = document.getElementById('sec-langs-'+seckey);
	var items = div.getElementsByTagName('a');
	for(var i=0; i<items.length; i++) {
		if(items[i].className) {
			res.push(items[i]);
		}
	}
	return res;
}

function help_get_section_current_lang(seckey) {
	var items = help_get_section_links(seckey);
	var found = -1;

	for(var i=0; i < items.length; i++) {
		if(items[i].className == 'current') {
			found = i;
			break;
		}
	}
	var i = 0;
	for(var lang in LANGS) {
		if(i == found) {
			return lang;
		}
		i++;
	}
	for(var lang in LANGS) {
		return lang;
	}
	return false;
}

function help_get_current_lang() {
	for(var lang in LANGS) {
		var a = document.getElementById('help-langs-'+lang);
		if(a.className == 'current') {
			return lang;
		}
	}
	return false;
}

function help_change_lang_section(obj, seckey, langkey) {
	if(obj.className == 'inactive') {
		return false;
	}
	var i=0;
	var childs = obj.parentNode.getElementsByTagName('a');
	for(var lang in LANGS) {
		if(childs[i].className != 'inactive') {
			childs[i].className = 'active';
		}
		if(lang == langkey) {
			document.getElementById('sec-'+seckey+'-'+lang).style.display='block';
		}
		else {
			document.getElementById('sec-'+seckey+'-'+lang).style.display='none';
		}
		i++;
	}
	obj.className = 'current';
	return false;
}

function help_reload_help_langs() {
	// init
	var help_langs = getFormValue('help_lang');
	var help_names = getFormValue('help_name');
	var help_descriptions = getFormValue('help_description');
	var current_lang = '';
	var new_current = '';
	// no lang at all
	if(!help_langs) {
		for(var lang in LANGS) {
			var a = document.getElementById('help-langs-'+lang);
			a.className = 'inactive';
		}
		document.getElementById('help-name').innerHTML = '';
		document.getElementById('help-description').innerHTML = '';
		return true;
	}
	// search current lang
	for(var lang in LANGS) {
		var a = document.getElementById('help-langs-'+lang);
		if(a.className == 'current') {
			current_lang = lang;
			break;
		}
	}
	// redefine class for flag links
	for(var lang in LANGS) {
		var a = document.getElementById('help-langs-'+lang);
		var found = -1;
		for(var i=0; i< help_langs.length; i++) {
			if(help_langs[i] == lang) {
				found = i;
				break;
			}
		}
		if(found >= 0) {
			if(lang == current_lang) {
				a.className = 'current';
				new_current = lang;
				help_change_lang(a, lang);
			}
			else {
				a.className = 'active';
			}
		}
		else {
			a.className = 'inactive';
		}
	}
	// if no current lang, set current the first active
	if(new_current == '') {
		for(var lang in LANGS) {
			var a = document.getElementById('help-langs-'+lang);
			if(a.className == 'active') {
				a.className == 'current';
				new_current = lang;
				help_change_lang(a, lang);
			}
		}
	}
	// if always no current lang, empty fields
	if(new_current == '') {
		document.getElementById('help-name').innerHTML = '';
		document.getElementById('help-description').innerHTML = '';
	}
}

function help_change_lang(obj,langkey) {
	if(obj.className == 'inactive') {
		return false;
	}
	var help_langs = getFormValue('help_lang');
	var help_names = getFormValue('help_name');
	var help_descriptions = getFormValue('help_description');
	for(var i=0;i < help_langs.length; i++) {
		if(help_langs[i] == langkey) {
			document.getElementById('help-name').innerHTML = help_names[i];
			document.getElementById('help-description').innerHTML = help_descriptions[i].replace(/\n/g, "<br />");
			var flags = document.getElementById('help-langs').childNodes;
			for(var j=0; j < flags.length; j++) {
				if(flags[j].className == 'current') {
					flags[j].className = 'active';
				}
			}
		}
	}
	obj.className = 'current';
	return false;
}

function help_open_subwindow(event,attrname,seckey) {
	var o = document.getElementById('tispecial'+attrname);
	if(seckey) {
		document.getElementById('edit_section_key').value = seckey;
	}
	if(o) {
		o.onclick.apply(null,[event]);
	}
	else {
		alert('Ooops, something that\'s shouldn\'t occur just happens !');
	}
	return false;
}

addEvent(window, 'load', help_check_first_last);

var section_template = '\n\
<div class="help-section-langs" id="sec-langs-{SECKEY}">\n\
	[BLOCK TEMPLATELANGS1]\n\
	<a href="#[LANGKEY]" class="[LANGCLASS]" title="[LANGNAME]" onclick="return help_change_lang_section(this,\'{SECKEY}\',\'[LANGKEY]\')"><img src="[IMG:flags/[LANGISO].png|16]" title="[LANGNAME]" width="16" height="16" /></a>\n\
	[ENDBLOCK TEMPLATELANGS1]\n\
</div><div class="help-section-langs">\n\
	<a onclick="return help_up(\'{SECKEY}\')" class="help_up">[TEXT:Up] &uarr;</a>&nbsp;\n\
	<a onclick="return help_down(\'{SECKEY}\')" class="help_down">[TEXT:Down] &darr;</a>&nbsp;\n\
	<a onclick="return help_open_subwindow(event,\'help_t_sections\',\'{SECKEY}\');">[TEXT:Edit translations]</a>&nbsp;\n\
	&nbsp;&nbsp;\n\
</div>[BLOCK TEMPLATELANGS2]<div class="help-section-item" style="display:[LANGDISPLAY]" id="sec-{SECKEY}-[LANGKEY]">\n\
	<div class="help-section-title" id="sec-name-{SECKEY}-[LANGKEY]" onclick="toggle_section(\'{SECKEY}\')" title="[TEXT:Section key] : [SECKEY]">[TEXT:New section] : {SECKEY}</div>\n\
	<div class="help-section-text" id="sec-text-{SECKEY}-[LANGKEY]"></div>\n\
</div>[ENDBLOCK TEMPLATELANGS2]';
</script>